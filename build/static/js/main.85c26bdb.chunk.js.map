{"version":3,"sources":["logo.svg","components/layout/header.js","components/Counter.js","components/ImageSlider.js","components/ValidationForm.js","components/FetchRandomUser.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","title","time","className","src","logo","alt","href","target","rel","Counter","initialCount","useState","count","setCount","onClick","ImageSlider","images","index","setIndex","console","log","useEffect","style","width","height","length","initialState","name","email","password","nameError","emailError","passwordError","ValidationForm","state","setState","handleChange","e","value","onSubmit","preventDefault","includes","validate","placeholder","onChange","fontSize","color","type","FetchRandomUser","loading","setLoading","people","setPeople","fetch","then","response","json","data","results","map","person","first","last","picture","large","login","uuid","App","visible","setVisible","buttonText","Date","toISOString","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85c26bdb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from '../../../src/logo.svg';\n\nconst Header = (props) => {\n  // destructuring the props passed in from App.js so I don't have to use dot-notation each time I want to use the objects in the prop\n  const { title, time } = props;\n\n  return (\n    <header className='App-header'>\n      <img src={logo} className='App-logo' alt='logo' />\n      <p>{title}</p>\n      <p>{time}</p>\n      <a\n        className='App-link'\n        href='https://reactjs.org'\n        target='_blank'\n        rel='noopener noreferrer'\n      >\n        Learn React\n      </a>\n    </header>\n  );\n};\n\nexport default Header;\n","// importin useState so we can use the state hook\nimport React, { useState } from 'react';\n\nfunction Counter(props) {\n  // destructuring the num value out of prop\n  const { initialCount } = props;\n  // setting a variable (\"count\") to 0 with useState\n  const [count, setCount] = useState(initialCount);\n  // one big advantage to using setCount is that it keeps us from mutating the count state variable\n\n  const buttonClick = () => setCount(count + 1);\n\n  return (\n    <div>\n      <div>count: {count}</div>\n      {/* using the setCount setter to update count w/ an event listener prop. each time a button is clicked, the Counter function gets called and the component gets rerendered */}\n      <button onClick={buttonClick}>increment</button>\n      <button onClick={() => setCount(count - 1)}>decrement</button>\n    </div>\n  );\n}\n\nexport default Counter;\n","import React, { useState, useEffect } from 'react';\n\nfunction ImageSlider() {\n  // setting state for images and index using hooks\n  const images = [\n    'https://i.picsum.photos/id/1/5616/3744.jpg?hmac=kKHwwU8s46oNettHKwJ24qOlIAsWN9d2TtsXDoCWWsQ',\n    'https://i.picsum.photos/id/10/2500/1667.jpg?hmac=J04WWC_ebchx3WwzbM-Z4_KC_LeLBWr5LZMaAkWkF68',\n    'https://i.picsum.photos/id/1001/5616/3744.jpg?hmac=38lkvX7tHXmlNbI0HzZbtkJ6_wpWyqvkX4Ty6vYElZE',\n    'https://i.picsum.photos/id/1003/1181/1772.jpg?hmac=oN9fHMXiqe9Zq2RM6XT-RVZkojgPnECWwyEF1RvvTZk',\n  ];\n\n  const [index, setIndex] = useState(0);\n\n  // event handler for Onclick...notice that things are actually updated asychronously. the value doesn't get updated right away\n  const handleNext = () => {\n    console.log(index);\n    index < images.length - 1 ? setIndex(index + 1) : setIndex(0);\n    console.log(index);\n  };\n  console.log(index);\n\n  // lifecycle functions to log when the slider gets unmounted\n\n  useEffect(() => {\n    console.log('mounted');\n    return function cleanup() {\n      console.log('unmounted');\n    };\n  });\n\n  // the above useEffect hook replaces these class-based lifecycle components:\n\n  // function componentWillUnmount() {\n  //   console.log('unmounting...');\n  // }\n\n  // function componentDidMount() {\n  //   console.log('mounting...');\n  // }\n\n  return (\n    <div>\n      <img\n        // style object that sets image height / width\n        style={{\n          width: 100,\n          height: 100,\n        }}\n        src={images[index]}\n        alt=''\n      />\n      <button onClick={handleNext}>Next</button>\n    </div>\n  );\n}\n\nexport default ImageSlider;\n","import React, { useState } from 'react';\n\nconst initialState = {\n  name: '',\n  email: '',\n  password: '',\n  nameError: '',\n  emailError: '',\n  passwordError: '',\n};\n\nfunction ValidationForm() {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = (e) => {\n    const value = e.target.value;\n    setState({\n      ...state,\n      [e.target.name]: value,\n    });\n  };\n\n  const validate = () => {\n    let nameError = '';\n    let emailError = '';\n    let passwordError = '';\n\n    if (!state.name) {\n      nameError = 'Please enter a name';\n    }\n\n    if (!state.email.includes('@')) {\n      emailError = 'invalid email';\n    }\n\n    if (!state.password) {\n      nameError = 'Please enter a password';\n    }\n\n    if (nameError || emailError) {\n      // apparently, I have to use the state spread operator or else the state that's not listed here gets reset by setState. I think maybe the useEffect hook has a way around this, but I don't have time to dig into it\n      setState({ ...state, emailError, nameError, passwordError });\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const isValid = validate();\n    if (isValid) {\n      console.log(state.name, state.email, state.password);\n      setState({ ...initialState });\n    }\n  };\n\n  return (\n    <form className='form' onSubmit={handleSubmit}>\n      <input\n        name='name'\n        placeholder='name'\n        value={state.name}\n        onChange={handleChange}\n      />\n      <div style={{ fontSize: 12, color: 'red' }}>{state.nameError}</div>\n      <input\n        name='email'\n        placeholder='email'\n        value={state.email}\n        onChange={handleChange}\n      />\n      <div style={{ fontSize: 12, color: 'red' }}>{state.emailError}</div>\n      <input\n        name='password'\n        type='password'\n        placeholder='password'\n        value={state.password}\n        onChange={handleChange}\n      />\n      <div style={{ fontSize: 12, color: 'red' }}>{state.passwordError}</div>\n      <button type='submit'>Submit</button>\n    </form>\n  );\n}\n\nexport default ValidationForm;\n","import React, { useState, useEffect } from 'react';\n\nfunction FetchRandomUser() {\n  const [loading, setLoading] = useState(true);\n  // replacing one person with an array of people\n  // const [person, setPerson] = useState(null);\n  const [people, setPeople] = useState([]);\n\n  // fetching data process:\n  // - show loading indicator as data is fetching\n  // - fetch data\n  // - render data\n  // ... in other words, we're NOT fetching the data in the render / return section\n\n  // when the component mounts, fetch runs\n  useEffect(() => {\n    const url = 'https://api.randomuser.me/?results=5';\n\n    // VERY IMPORTANT that we have the [] after the fetch request, or else React will contiunally fetch the data when using useEffect. this explains why: https://stackoverflow.com/questions/56926282/react-hooks-fetch-wont-stop-fetching\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => setPeople(data.results), setLoading(false));\n  }, []);\n\n  // if loading === true or the person hasn't retrieved yet...\n  return (\n    <div>\n      {loading || !people ? (\n        <div>loading...</div>\n      ) : (\n        <div>\n          {/* this is how we display the same content for every person in the people array...we use map and map in the JSX for each item in the array */}\n          {people.map((person, index) => {\n            return (\n              // assigning a key so JS doesn't yell at us. we could also use the index of the map, which we declared above but aren't using. ideally, you want to use something better than the index of the array\n              <div key={person.login.uuid}>\n                <div>{person.name.first}</div>\n                <div>{person.name.last}</div>\n                <div>\n                  <img src={person.picture.large} alt='' />\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default FetchRandomUser;\n","import './App.css';\nimport { useState } from 'react';\nimport Header from './components/layout/header';\nimport Counter from './components/Counter';\nimport ImageSlider from './components/ImageSlider';\n// import MyForm from './components/MyForm';\nimport ValidationForm from './components/ValidationForm';\nimport FetchRandomUser from './components/FetchRandomUser';\n\nfunction App(props) {\n  const [visible, setVisible] = useState(true);\n\n  // setting a conditional for button text...I could also just do this in the brackets of the button\n  const buttonText = visible ? 'hide' : 'show';\n\n  return (\n    <div className='App'>\n      {/* passing \"title\" as a prop to Header...I don't have to wrap it in curly braces because it's a string */}\n      <Header\n        title='Hello from App'\n        time={new Date().toISOString().slice(0, 10)}\n      />\n      <body>\n        <FetchRandomUser />\n        <br />\n        <br />\n        <br />\n        <p>This is body text</p>\n        {/* passing a num value to the Counter */}\n        <Counter initialCount={10} />\n        {/* conditional render: setting whether the slider is visible or not */}\n        <div>{visible ? <ImageSlider /> : null}</div>\n        <button onClick={() => setVisible(!visible)}>{buttonText}</button>\n        <br />\n        <br />\n        <ValidationForm />\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}